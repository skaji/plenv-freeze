#!/usr/bin/env perl
#
# Summary: freeze/unfreeze perl installation
#
# Usage: plenv freeze   <version>
#        plenv unfreeze <version>
#
#  -h, --help     show this help
#  -l, --list     show perl versions with freezed or not
#
use strict;
use warnings;
use Getopt::Long ();
use File::Find ();
use File::Spec;

sub new {
    my $class = shift;
    my $name = $0 =~ /unfreeze$/ ? "unfreeze" : "freeze";
    bless { name => $name }, $class;
}

sub show_help {
    open my $fh, "<", $0 or return;
    scalar <$fh>;
    while (<$fh>) {
        s/^#// and print and next;
        last;
    }
}

sub parse_options {
    my ($self, @argv) = @_;
    my $parser = Getopt::Long::Parser->new(
        config => [qw(no_auto_abbrev no_ignore_case)],
    );
    local @ARGV = @argv;
    $parser->getoptions(
        "h|help" => sub { $self->show_help; exit 0 },
        "l|list" => sub { $self->show_versions; exit 0 },
        "complete" => sub { $self->show_completions; exit 0 },
    ) or exit 1;
    @ARGV or die "Missing <version> argument, try 'plenv $self->{name} --help'\n";
    $self->{versions} = \@ARGV;
}

sub show_versions {
    my $self = shift;
    my $root = $ENV{PLENV_ROOT} || "$ENV{HOME}/.plenv";
    my $vroot = File::Spec->catdir($root, "versions");
    opendir my $dh, $vroot or die "$vroot: $!\n";
    my @versions = grep { $_ ne "." and $_ ne ".." } readdir $dh;
    my $current = sub {
        my $file = File::Spec->catfile($root, "version");
        return "" unless -f $file;
        open my $fh, "<", $file or die "$file: $!\n";
        my $current = <$fh>;
        chomp $current;
        $current;
    }->();
    my $freezed = -t STDOUT ? " \e[31mfreezed\e[m" : " freezed";
    for my $version ("system", @versions) {
        printf "%s %s%s\n",
            $version eq $current ? "*" : " ",
            $version,
            $self->is_freezed($version, $vroot) ? $freezed : "";
    }
}

# Provide plenv completions (this line required for plenv-completions)
sub show_completions {
    shift;
    print "system\n";
    system "plenv-versions --bare";
}

sub collect {
    my ($self, $root) = @_;
    my (@file, @dir);
    my $find = sub { -d $_ ? push @dir, $_ : push @file, $_ };
    File::Find::find({wanted => $find, no_chdir => 1}, $root);
    @dir = sort { length $b <=> length $a } @dir;
    (\@file, \@dir);
}

sub freeze {
    my ($self, $root) = @_;
    my ($files, $dirs) = $self->collect($root);
    for my $file (@$files) {
        my $mode = -x $file ? 0555 : 0444;
        chmod $mode, $file;
    }
    for my $dir (@$dirs) {
        chmod 0555, $dir;
    }
}

sub unfreeze {
    my ($self, $root) = @_;
    my ($files, $dirs) = $self->collect($root);
    for my $dir (reverse @$dirs) {
        chmod 0755, $dir;
    }
    for my $file (@$files) {
        my $mode = -x $file ? 0755 : 0644;
        chmod $mode, $file;
    }
}

sub is_freezed {
    my (undef, $version, $vroot) = @_;
    my $dir = File::Spec->catdir($vroot, $version);
    -d $dir and ! -w $dir;
}

sub run {
    my ($class, @argv) = @_;
    my $self = $class->new;
    $self->parse_options(@argv);
    my $root = File::Spec->catdir($ENV{PLENV_ROOT} || "$ENV{HOME}/.plenv", "versions");
    for my $version (@{$self->{versions}}) {
        my $target = File::Spec->catdir($root, $version);
        die "Missing version '$version', try `plenv versions`\n" unless -d $target;
        local $| = 1;
        if ($self->{name} eq "unfreeze") {
            print "Unfreezing $version ...";
            $self->unfreeze($target);
        } else {
            print "Freezing $version ...";
            $self->freeze($target);
        }
        print " DONE\n";
    }
}

__PACKAGE__->run(@ARGV) unless caller;
